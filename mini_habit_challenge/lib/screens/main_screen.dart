import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'challenge_list_screen.dart';
import 'statistics_screen.dart';
import 'about_screen.dart';
import 'profile_screen.dart';
import 'settings_screen.dart';
import '../widgets/add_habit_dialog.dart';
import 'package:mini_habit_challenge/l10n/app_localizations.dart';
import '../providers/habit_provider.dart';
import '../providers/profile_provider.dart';
import '../providers/settings_provider.dart';
class MainScreen extends StatefulWidget {
  const MainScreen({Key? key}) : super(key: key);

  @override
  _MainScreenState createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _selectedIndex = 0;

  // 2. C·∫≠p nh·∫≠t danh s√°ch Widget (thay About b·∫±ng Profile)
  static const List<Widget> _widgetOptions = <Widget>[
    ChallengeListScreen(),
    StatisticsScreen(),
    ProfileScreen(), // <--- Thay ƒë·ªïi ·ªü ƒë√¢y
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  List<AppBar> _buildAppBars(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return [
      // AppBar cho Tab 0: Th·ª≠ th√°ch (C√ì N√öT MENU)
      AppBar(
        leading: Builder(
          builder: (context) {
            // Builder n√†y l·∫•y context B√äN TRONG Scaffold c·ªßa MainScreen
            return IconButton(
              icon: Icon(Icons.menu, size: 30),
              onPressed: () {
                // L·ªánh n√†y gi·ªù s·∫Ω t√¨m ƒë√∫ng Scaffold v√† M·ªû ƒê∆Ø·ª¢C
                Scaffold.of(context).openDrawer();
              },
            );
          },
        ),
        title: Text(l10n.tabChallenges, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 22)),
        centerTitle: true,
        elevation: 0,
      ),
      // AppBar cho Tab 1: Th·ªëng k√™
      AppBar(
        title: Text(l10n.tabStatistics, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 22)),
        centerTitle: true,
        elevation: 0,
        automaticallyImplyLeading: false, // T·∫Øt n√∫t back/menu
      ),
      // AppBar cho Tab 2: H·ªì s∆°
      AppBar(
        title: Text("H·ªì s∆°", style: TextStyle(fontWeight: FontWeight.bold, fontSize: 22)), // (S·∫Ω th√™m l10n sau)
        centerTitle: true,
        elevation: 0,
        automaticallyImplyLeading: false, // T·∫Øt n√∫t back/menu
      ),
    ];
  }
  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final appBars = _buildAppBars(context);

    return Scaffold(
      // --- (3. TH√äM DRAWER V√ÄO ƒê√ÇY) ---
      drawer: Drawer(
        child: Column(
          children: [
            // Header c·ªßa Drawer
            UserAccountsDrawerHeader(
              accountName: Text(
                l10n.appName,
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              accountEmail: Text("${l10n.version} 1.0.0"), // G·ª£i √Ω c·ªßa t√¥i
              currentAccountPicture: CircleAvatar(
                backgroundColor: theme.colorScheme.onPrimary,
                child: Text(
                  "üéØ",
                  style: TextStyle(fontSize: 40),
                ),
              ),
              decoration: BoxDecoration(
                color: theme.colorScheme.primaryContainer,
              ),
            ),
            
            // C√°c m·ª•c menu
            ListTile(
              leading: Icon(Icons.home_outlined),
              title: Text(l10n.tabChallenges),
              onTap: () {
                setState(() { _selectedIndex = 0; }); // Chuy·ªÉn v·ªÅ Tab 0
                Navigator.pop(context); // ƒê√≥ng menu
              },
            ),
            ListTile(
              leading: Icon(Icons.bar_chart_outlined),
              title: Text(l10n.tabStatistics),
              onTap: () {
                setState(() { _selectedIndex = 1; }); // Chuy·ªÉn v·ªÅ Tab 1
                Navigator.pop(context); // ƒê√≥ng menu
              },
            ),
            ListTile(
              leading: Icon(Icons.person_outline),
              title: Text(l10n.profile), // (S·∫Ω th√™m l10n sau)
              onTap: () {
                setState(() { _selectedIndex = 2; }); // Chuy·ªÉn v·ªÅ Tab 2
                Navigator.pop(context); // ƒê√≥ng menu
              },
            ),
            Divider(),
            ListTile(
              leading: Icon(Icons.settings_outlined),
              title: Text(l10n.settings), // (S·∫Ω th√™m l10n sau)
              onTap: () {
                Navigator.pop(context); // ƒê√≥ng menu
                // (ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh C√†i ƒë·∫∑t)
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const SettingsScreen()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.info_outline),
              title: Text(l10n.tabAbout), // "Th√¥ng tin"
              onTap: () {
                Navigator.pop(context); // ƒê√≥ng menu
                // (ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh Th√¥ng tin)
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const AboutScreen()),
                );
              },
            ),
            
            // G·ª£i √Ω c·ªßa t√¥i: N√∫t Reset d·ªØ li·ªáu
            Spacer(), // ƒê·∫©y m·ª•c n√†y xu·ªëng cu·ªëi
            ListTile(
              leading: Icon(Icons.delete_sweep_outlined, color: Colors.red),
              title: Text("Reset ·ª©ng d·ª•ng", style: TextStyle(color: Colors.red)),
              onTap: () {
                // ƒê√≥ng menu tr∆∞·ªõc
                Navigator.pop(context); 
                
                // Hi·ªÉn th·ªã Dialog x√°c nh·∫≠n
                showDialog(
                  context: context,
                  builder: (ctx) => AlertDialog(
                    title: Text("B·∫°n c√≥ ch·∫Øc ch·∫Øn?"),
                    content: Text("To√†n b·ªô th√≥i quen, h·ªì s∆° v√† c√†i ƒë·∫∑t s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn."),
                    actions: [
                      TextButton(
                        child: Text("H·ªßy"),
                        onPressed: () => Navigator.of(ctx).pop(),
                      ),
                      FilledButton(
                        child: Text("Reset"),
                        style: FilledButton.styleFrom(
                          backgroundColor: Colors.red,
                        ),
                        onPressed: () {
                          // L·∫•y T·∫§T C·∫¢ provider (listen: false)
                          final habitProvider = Provider.of<HabitProvider>(context, listen: false);
                          final profileProvider = Provider.of<ProfileProvider>(context, listen: false);
                          final settingsProvider = Provider.of<SettingsProvider>(context, listen: false);
                          
                          // G·ªçi c√°c h√†m reset
                          habitProvider.resetAllHabits();
                          profileProvider.resetProfile();
                          settingsProvider.resetSettings();
                          
                          // ƒê√≥ng Dialog
                          Navigator.of(ctx).pop(); 
                        },
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
      
      appBar: appBars[_selectedIndex],

      body: IndexedStack(
        index: _selectedIndex,
        children: _widgetOptions,
      ),
      
      // --- (4. C·∫¨P NH·∫¨T BOTTOM NAV BAR) ---
      bottomNavigationBar: BottomNavigationBar(
        items: <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.check_circle_outline),
            label: l10n.tabChallenges,
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.bar_chart),
            label: l10n.tabStatistics,
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline), // <-- Icon m·ªõi
            label: l10n.profile, // <-- T√™n m·ªõi (s·∫Ω th√™m l10n sau)
          ),
        ],
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        
        // (G·ª£i √Ω): Fix giao di·ªán khi d√πng 3 tab v·ªõi M3
        type: BottomNavigationBarType.fixed, 
      ),

      floatingActionButton: _selectedIndex == 0
          ? FloatingActionButton(
              onPressed: () {
                // G·ªçi Dialog ƒë√£ ƒë∆∞·ª£c t√°ch ra
                showDialog(
                  context: context,
                  builder: (context) => const AddHabitDialog(),
                );
              },
              child: Icon(Icons.add),
              tooltip: l10n.addHabit,
            )
          : null,
    );
  }
}